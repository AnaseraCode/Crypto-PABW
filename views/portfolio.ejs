<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Portfolio</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <h1>Your Coin Portfolio</h1>
  <div class="portfolio-container">
    <div class="add-coin-form">
      <input type="text" id="coinName" placeholder="Enter coin name (e.g., Bitcoin)">
      <input type="number" id="coinQuantity" placeholder="Enter quantity" min="0" step="any">
      <input type="number" id="coinPrice" placeholder="Enter price per coin (IDR)" min="0" step="any">
      <button onclick="addCoin()">Add Coin</button>
    </div>
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Quantity</th>
          <th>Purchase Value (IDR)</th>
          <th>Current Value (IDR)</th>
          <th>Worth</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="portfolioTableBody">
        <!-- Rows will be added here dynamically -->
      </tbody>
    </table>
  </div>

  <div id="chart-container">
    <div id="tradingview-widget"></div>
  </div>

  <script src="https://s3.tradingview.com/tv.js"></script>
  <script>
    const coinSymbols = {
      Bitcoin: 'bitcoin',
      Ethereum: 'ethereum',
      // Add more coins as needed
    };

    const portfolioData = [];

    async function fetchCurrentPrice(coinName) {
      const coinId = coinSymbols[coinName];
      if (!coinId) {
        alert('Coin not supported');
        return null;
      }
      
      try {
        const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${coinId}&vs_currencies=idr`);
        const data = await response.json();
        return data[coinId].idr;
      } catch (error) {
        alert('Error fetching current price');
        return null;
      }
    }

    function renderPortfolio() {
      const tableBody = document.getElementById('portfolioTableBody');
      tableBody.innerHTML = '';

      portfolioData.forEach((coin, index) => {
        const purchaseValue = coin.quantity * coin.pricePerCoin;
        const currentValue = coin.quantity * coin.currentPrice;
        const worth = currentValue > purchaseValue ? 'Buy' : 'Sell';

        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${coin.name}</td>
          <td>${coin.quantity}</td>
          <td>Rp${purchaseValue.toLocaleString()}</td>
          <td>Rp${currentValue.toLocaleString()}</td>
          <td>${worth}</td>
          <td>
            <button onclick="editCoin(${index})">Edit</button>
            <button onclick="deleteCoin(${index})">Delete</button>
          </td>
        `;
        tableBody.appendChild(row);
      });

      renderTradingViewWidget();
    }

    async function addCoin() {
      const coinName = document.getElementById('coinName').value.trim();
      const coinQuantity = parseFloat(document.getElementById('coinQuantity').value.trim());
      const coinPrice = parseFloat(document.getElementById('coinPrice').value.trim());

      if (!coinName || isNaN(coinQuantity) || isNaN(coinPrice) || coinQuantity <= 0 || coinPrice <= 0) {
        alert('Please enter valid coin name, quantity, and price per coin (IDR)');
        return;
      }

      const currentPrice = await fetchCurrentPrice(coinName);

      if (!currentPrice) {
        return;
      }

      portfolioData.push({ name: coinName, quantity: coinQuantity, pricePerCoin: coinPrice, currentPrice: currentPrice });
      renderPortfolio();
    }

    function editCoin(index) {
      const coin = portfolioData[index];
      const coinPrice = parseFloat(prompt('Enter new purchase price per coin (IDR)', coin.pricePerCoin));
      const currentPrice = parseFloat(prompt('Enter new current price per coin (IDR)', coin.currentPrice));

      if (isNaN(coinPrice) || isNaN(currentPrice) || coinPrice <= 0 || currentPrice <= 0) {
        alert('Please enter valid values');
        return;
      }

      portfolioData[index].pricePerCoin = coinPrice;
      portfolioData[index].currentPrice = currentPrice;
      renderPortfolio();
    }

    function deleteCoin(index) {
      portfolioData.splice(index, 1);
      renderPortfolio();
    }

    function renderTradingViewWidget() {
      const symbols = portfolioData.map(coin => {
        const symbol = coinSymbols[coin.name] || coin.name.toUpperCase();
        return `COINBASE:${symbol.toUpperCase()}USD`;
      });

      new TradingView.MediumWidget({
        container_id: 'tradingview-widget',
        symbols: symbols,
        greyText: 'Quote list',
        gridLineColor: '#e9e9ea',
        fontColor: '#83888D',
        underLineColor: '#dbeffb',
        trendLineColor: '#4bafe9',
        width: '100%',
        height: 500,
        locale: 'en'
      });
    }

    renderPortfolio();
  </script>
</body>
</html>
